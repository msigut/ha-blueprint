switch_and_light:
  alias: Switch and Light
  description: "Switch and Light works together"
  fields:
    switches:
      name: Switches
      description: All my switches to check status and turn on/off
      required: true
    lights:
      name: Lights
      description: All my lights to turn on/off
      required: true
    brightness:
      name: Brightness
      description: Brightness empowered for on [0]
      example: 80
    start_kelvin:
      name: Start-up Kelvin
      description: Do replace Start-up value for Kelvin [250] ; (Ikea 250, Philips Hue 153)
      example: 250
    start_level:
      name: Start-up Brightness
      description: Do replace Start-up value for Brightness [50]
      example: 50

  sequence:
    - variables:
        # main
        transition: 1
        # default values
        brightness: "{{ brightness | default(0) }}"
        start_kelvin: "{{ start_kelvin  | default(250) }}"
        start_level: "{{ start_level | default(50) }}"
        # switches
        switch_on: "{{ states.switch | selectattr('entity_id', 'in', switches) | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
        switch_off: "{{ states.switch | selectattr('entity_id', 'in', switches) | selectattr('state','eq','off') | map(attribute='entity_id') | list }}"
        switch_on_count: "{{ switch_on | count }}"
        switch_off_count: "{{ switch_off | count }}"
        # lights
        light_on: "{{ states.light | selectattr('entity_id', 'in', lights) | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
        light_off: "{{ states.light | selectattr('entity_id', 'in', lights) | selectattr('state','eq','off') | map(attribute='entity_id') | list }}"
        light_on_count: "{{ light_on | count }}"
        light_off_count: "{{ light_off | count }}"
        # brightness
        adaptive_lighting: "{{ states.switch | map(attribute='entity_id') | select('search', 'adaptive_lighting') | reject('search', '_update') | reject('search', '_mode') | reject('search', '_color') | reject('search', '_brightness') | list | first | default('') }}"
        brightness_pct: "{{ iif( brightness > 0, brightness, state_attr(adaptive_lighting, 'brightness_pct') | int(0) ) }}"
        color_temp_kelvin: "{{ state_attr(adaptive_lighting, 'color_temp_kelvin') | int(0) }}"
        # start-up
        light_kelvin: |
          {% set res = namespace(list=[]) %}
          {% for li in lights %}
          {%   set res.list = res.list + device_entities(device_id(li)) | select('search', 'start_up_color_temperature') | list %}
          {% endfor %}
          {{ res.list }}
        light_level: |
          {% set res = namespace(list=[]) %}
          {% for li in lights %}
          {%   set res.list = res.list + device_entities(device_id(li)) | select('search', 'start_up_current_level') | list %}
          {% endfor %}
          {{ res.list }}

    - service: logbook.log
      data:
        name: SwitchLight
        message: "Switch [on: {{switch_on_count}} / off:{{switch_off_count}}] | Light [on:{{light_on_count}} / off:{{light_off_count}}] | AL Brightness [{{brightness_pct}}] | AL Kelvin [{{color_temp_kelvin}}] | Start Kelvin [{{start_kelvin}} / {{light_kelvin | count}}] | Start Brightness [{{start_level}} / {{light_level | count}}]"

    # enable
    - if:
        - condition: template
          value_template: "{{ light_off_count > 0 }}"
      then:
        # switch
        - if:
            - condition: template
              value_template: "{{ switch_off_count > 0 }}"
          then:
            - service: switch.turn_on
              target:
                entity_id: "{{switch_off}}"
        # lights
        - if:
            - condition: template
              value_template: "{{ brightness > 0 }}"
          # power enable
          then:
            - service: adaptive_lighting.set_manual_control
              data:
                entity_id: "{{adaptive_lighting}}"
                lights: "{{ light_off }}"
                manual_control: true
        - if:
            - condition: template
              value_template: "{{ brightness_pct > 0 and color_temp_kelvin > 0 }}"
          # enable Adaptive lighting
          then:
            - service: light.turn_on
              target:
                entity_id: "{{light_off}}"
              data:
                kelvin: "{{color_temp_kelvin}}"
                brightness_pct: "{{brightness_pct}}"
                transition: "{{transition}}"
          # common enable
          else:
            - service: light.turn_on
              target:
                entity_id: "{{light_off}}"
              data:
                transition: "{{transition}}"
      # disable
      else:
        # start: kelvin
        - if:
            - condition: template
              value_template: "{{ start_kelvin > 0 }}"
          then:
            - service: number.set_value
              target:
                entity_id: "{{light_kelvin}}"
              data:
                value: "{{start_kelvin}}"
        # start: level
        - if:
            - condition: template
              value_template: "{{ start_level > 0 }}"
          then:
            - service: number.set_value
              target:
                entity_id: "{{light_level}}"
              data:
                value: "{{start_level}}"
        # lights
        - service: light.turn_off
          target:
            entity_id: "{{light_on}}"
          data:
            transition: "{{transition}}"
        # switch
        - if:
            - condition: template
              value_template: "{{ switch_on_count > 0 }}"
          then:
            - service: switch.turn_off
              target:
                entity_id: "{{switch_on}}"

  mode: single
